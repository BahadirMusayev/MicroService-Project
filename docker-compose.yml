services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: 12345
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped

#  zookeeper:
#    image: bitnami/zookeeper:latest
#    container_name: zookeeper
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ALLOW_ANONYMOUS_LOGIN: yes
#      ZOO_JUTE_MAXBUFFER: 10485760
#    ports:
#      - "2181:2181"
#    networks:
#      - kafka
#    restart: unless-stopped
#    depends_on:
#      - postgres
#      - pgadmin
#
#  kafka:
#    image: bitnami/kafka:latest
#    container_name: kafka
#    environment:
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
#      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
#      KAFKA_CREATE_TOPICS: "contacts-topic"
#    ports:
#      - "9093:9093"
#    depends_on:
#      - postgres
#      - pgadmin
#      - zookeeper
#    networks:
#      - kafka
#    restart: unless-stopped

  rabbitmq:
    image: "rabbitmq:management"
    container_name: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    networks:
      - rabbitMQ
    restart: unless-stopped
    depends_on:
      - postgres
      - pgadmin

  customer:
    container_name: customer
    image: customer
    build:
      context: ./customer
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/customer
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 12345
    ports:
      - "8081:8081"
    networks:
      - postgres
      - api_gateway
      - rabbitMQ
#      - kafka
    restart: unless-stopped
    depends_on:
      - postgres
      - pgadmin
      - rabbitmq
#      - zookeeper
#      - kafka
    command: ["./wait-for-it.sh", "postgres:5432", "--", "java", "-jar", "customer.jar"]

  contacts:
    container_name: contacts
    image: contacts
    build:
      context: ./contacts
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/contacts
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 12345
    ports:
      - "8082:8082"
    networks:
      - postgres
      - api_gateway
      - rabbitMQ
#      - kafka
    restart: unless-stopped
    depends_on:
      - postgres
      - pgadmin
      - rabbitmq
#      - zookeeper
#      - kafka
    command: ["./wait-for-it.sh", "postgres:5432", "--", "java", "-jar", "contacts.jar"]

  nginx:
    container_name: nginx
    image: nginx:latest
    build:
      context: C:/Users/HP/Desktop/customerservices
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - api_gateway
    depends_on:
      - postgres
      - pgadmin
      - rabbitmq
      - customer
      - contacts
#      - zookeeper
#      - kafka
    restart: unless-stopped

networks:
  api_gateway:
    driver: bridge
  rabbitMQ:
    driver: bridge
  postgres:
    driver: bridge
#  kafka:
#    driver: bridge

volumes:
  postgres:
  pgadmin: